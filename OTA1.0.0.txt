#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <BlynkSimpleEsp32.h>
#include <Update.h>
#include <HardwareSerial.h>
#include <Preferences.h>

// Define virtual pins for Blynk
#define vInSense V1
#define vOutSense V2
#define iInSense V3
#define update V4

// Blynk Auth Token
char auth[] = "eIlMwM8qJ8XjMgWFKS-IxGTfPFFYbUFd";

// WiFi credentials
// char ssid[] = "National-Infotech 4G";
// char pass[] = "Nitech4g";
char ssid[] = "MDCNetgear";
char pass[] = "d9825125877";


// Firmware update URL (Direct GitHub raw URL)
// const char* firmwareUrl = "https://raw.githubusercontent.com/Jay3770/ESP_OTA/main/firmware.bin";
// const char* versionUrl = "https://raw.githubusercontent.com/Jay3770/ESP_OTA/main/OTA1.0.0.txt";

const char* firmwareUrl = "https://raw.githubusercontent.com/Jay3770/OTA/main/firmware.bin";
const char* versionUrl = "https://raw.githubusercontent.com/Jay3770/OTA/main/OTA1.0.0.txt";

// Time interval for checking updates (15 minutes)
const unsigned long updateInterval = 900000;
unsigned long previousUpdateMillis = 0;

// UART communication timing
unsigned long previousUARTMillis = 0;
const unsigned long uartInterval = 500;  // Send command every 500ms

// LED pin
const int ledPin = 2;

// Define UART pins for ESP32
#define UART_NUM 1
#define TXD_PIN 17  // TX pin
#define RXD_PIN 16  // RX pin
#define BUFFER_SIZE 256  // Size of the buffer for received data

// Define UART baud rate
#define BAUD_RATE 115200

// Create a HardwareSerial instance
HardwareSerial mySerial(UART_NUM);

char rxBuffer[BUFFER_SIZE];
volatile int rxIndex = 0;

// Flag to indicate update status
bool updateApplied = false;

// Preferences for storing firmware version
Preferences preferences;

// Function declarations
void checkForUpdate();
void toggleLED();
void clearBlynkData();
String getCurrentVersion();
String getLatestVersion();

BLYNK_CONNECTED() {
    clearBlynkData();
}

void setup() {
    Serial.begin(115200);
    pinMode(ledPin, OUTPUT);
    digitalWrite(ledPin, LOW);

    // Initialize HardwareSerial for communication with STM32
    mySerial.begin(BAUD_RATE, SERIAL_8N1, RXD_PIN, TXD_PIN);

    // Connect to WiFi
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWiFi connected");

    // Initialize Blynk
    Blynk.begin(auth, ssid, pass);

    Serial.println("ESP32 Initialized and Connected to Blynk");

    // Initialize Preferences
    preferences.begin("firmware", false);

    // Initial firmware check
    checkForUpdate();
}

void loop() {
    Blynk.run();

    unsigned long currentMillis = millis();

    // Check for firmware update every updateInterval
    if (currentMillis - previousUpdateMillis >= updateInterval) {
        previousUpdateMillis = currentMillis;
        checkForUpdate();
    }

    // UART communication with STM32 every uartInterval
    if (currentMillis - previousUARTMillis >= uartInterval) {
        previousUARTMillis = currentMillis;
        mySerial.write(0x66); // Send request to STM32
    }

    // Process incoming UART data
    while (mySerial.available()) {
        char c = mySerial.read();
        if (c == '\n') {
            rxBuffer[rxIndex] = '\0';  // Null-terminate the string
            rxIndex = 0;  // Reset index for the next message

            // Convert buffer to String and process it
            String receivedData = String(rxBuffer);

            // Split received data into parts and update Blynk
            String dataParts[3];
            int index = 0;
            int lastIndex = 0;

            for (int i = 0; i < receivedData.length(); i++) {
                if (receivedData[i] == ',' || i == receivedData.length() - 1) {
                    if (i == receivedData.length() - 1 && receivedData[i] != ',') {
                        i++;  // Include the last character if it's not a comma
                    }
                    dataParts[index++] = receivedData.substring(lastIndex, i);
                    lastIndex = i + 1;
                }
            }

            // Update Blynk virtual pins with validation
            if (index > 0 && dataParts[0].length() > 0) {
                Blynk.virtualWrite(vInSense, dataParts[0]);
            }
            if (index > 1 && dataParts[1].length() > 0) {
                Blynk.virtualWrite(vOutSense, dataParts[1]);
            }
            if (index > 2 && dataParts[2].length() > 0) {
                float currentInAmps = dataParts[2].toFloat();
                float currentInMilliAmps = currentInAmps / 100;  // Convert to milliamps
                Blynk.virtualWrite(iInSense, currentInMilliAmps);
            }
        } else {
            if (rxIndex < BUFFER_SIZE - 1) {
                rxBuffer[rxIndex++] = c;
            }
        }
    }

    // LED toggle function to indicate code is running
    toggleLED();
}

void checkForUpdate() {
    if (updateApplied) {
        Serial.println("Update already applied. Skipping check.");
        return;
    }

    String currentVersion = getCurrentVersion();
    String latestVersion = getLatestVersion();

    Serial.printf("Current Version: %s\n", currentVersion.c_str());
    Serial.printf("Latest Version: %s\n", latestVersion.c_str());

    if (latestVersion != currentVersion) {
        Serial.println("New firmware available. Starting update...");

        WiFiClientSecure client;
        client.setInsecure(); // Bypass SSL validation

        HTTPClient http;
        http.begin(client, firmwareUrl);

        int httpCode = http.GET();
        if (httpCode == HTTP_CODE_OK) {
            int firmwareSize = http.getSize();
            if (firmwareSize > 0) {
                WiFiClient* stream = http.getStreamPtr();
                if (Update.begin(firmwareSize)) {
                    size_t written = Update.writeStream(*stream);
                    if (written == firmwareSize) {
                        if (Update.end()) {
                            Serial.println("Update complete. Rebooting...");
                            Blynk.virtualWrite(update, 1);  // Indicate update success
                            updateApplied = true;  // Set flag to indicate update has been applied
                            preferences.putString("version", latestVersion);  // Store new version
                            ESP.restart();
                        } else {
                            Serial.println("Update end failed");
                        }
                    } else {
                        Serial.printf("Firmware update failed. Written: %d, Expected: %d\n", written, firmwareSize);
                    }
                } else {
                    Serial.println("Not enough space for update");
                }
            } else {
                Serial.println("Firmware size is 0");
            }
        } else {
            Serial.printf("HTTP GET failed: %s\n", http.errorToString(httpCode).c_str());
        }

        http.end();  // Close the connection
    } else {
        Serial.println("No new firmware available.");
        Blynk.virtualWrite(update, 0);  // Indicate no update was applied
    }
}

String getCurrentVersion() {
    return preferences.getString("version", "1.0.0");
}

String getLatestVersion() {
    WiFiClientSecure client;
    client.setInsecure();  // Bypass SSL validation

    HTTPClient http;
    http.begin(client, versionUrl);

    int httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK) {
        String version = http.getString();
        version.trim();  // Remove any extra spaces or newlines
        return version;
    } else {
        Serial.printf("Failed to get latest version: %s\n", http.errorToString(httpCode).c_str());
        return "1.0.0";
    }
}

void toggleLED() {
    static unsigned long lastToggleTime = 0;
    unsigned long currentMillis = millis();
    if (currentMillis - lastToggleTime >= 1000) {  // Toggle every 1 second
        lastToggleTime = currentMillis;
        digitalWrite(ledPin, !digitalRead(ledPin));
    }
}

void clearBlynkData() {
    Blynk.virtualWrite(vInSense, "0");
    Blynk.virtualWrite(vOutSense, "0");
    Blynk.virtualWrite(iInSense, "0");
    Blynk.virtualWrite(update, 0);
}